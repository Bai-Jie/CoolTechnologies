apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.application'

android {
    compileSdkVersion 21
    buildToolsVersion "21.1.1"

    defaultConfig {
        applicationId "com.optimalorange.cooltechnologies"
        minSdkVersion 15
        targetSdkVersion 21
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    // read local.properties
    Properties localProperties = new Properties()
    localProperties.load(project.rootProject.file('local.properties').newReader('UTF-8'))

    // set R.string.youku_client_id according to youku.clientId in local.properties
    final String client_id = localProperties.getProperty('youku.clientId')
    if (client_id != null) {
        applicationVariants.all { variant ->
            variant.resValue "string", "youku_client_id", client_id
        }
    } else {
        throw new org.gradle.api.resources.ResourceException(
                'Please set youku.clientId in local.properties file at root project')
    }
    // set R.string.youku_client_secret according to youku.clientSecret in local.properties
    final String client_secret = localProperties.getProperty('youku.clientSecret')
    if (client_secret != null) {
        applicationVariants.all { variant ->
            variant.resValue "string", "youku_client_secret", client_secret
        }
    } else {
        throw new org.gradle.api.resources.ResourceException(
                'Please set youku.clientSecret in local.properties file at root project')
    }

    // set R.string.umeng_app_key according to umeng.appKey in local.properties
    final String umengAppKey = localProperties.getProperty('umeng.appKey')
    if (umengAppKey != null) {
        applicationVariants.all { variant ->
            variant.resValue "string", "umeng_app_key", umengAppKey
        }
    } else {
        throw new org.gradle.api.resources.ResourceException(
                'Please set umeng.appKey in local.properties file at root project')
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:support-v4:21.0.2'
    compile 'com.android.support:cardview-v7:21.0.2'
    compile 'com.android.support:recyclerview-v7:21.0.2'
    compile 'com.android.support:support-v13:21.0.2'
    compile 'com.viewpagerindicator:library:2.4.1'
    compile 'com.mcxiaoke.volley:library:1.0.9@aar'
    compile 'com.etsy.android.grid:library:1.0.5'
    compile 'cpr.name.videoenabledwebview:library:1.0'
    compile 'com.umeng.update:library:2.4.2'
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 代码质量检查 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// 摘（窃取:）自 http://blogs.burnsidedigital.com/2014/06/code-quality-and-testing-with-gradle-in-android-projects/?utm_source=tuicool
apply plugin: 'checkstyle'

check.dependsOn 'checkstyle'
task checkstyle(type: Checkstyle) {
//    ignoreFailures = true    // 如果想暂时忽略code style问题，让本行代码生效
    configFile new File(rootDir, "config/checkstyle/checkstyle.xml")

    source 'src'
    include '**/*.java'
    include '**/*.xml'
//    exclude '**/packageName/**', '**/utils/MyFile.java'
    classpath = files()
}

apply plugin: 'pmd'

check.dependsOn 'pmd'
task pmd(type: Pmd) {
//    ignoreFailures = true

    ruleSets = ["java-basic", "java-braces", "java-android"]

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml.enabled = true
        html.enabled = true
    }
}

